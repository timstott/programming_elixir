* Chapter 4 Elixir Basics
** Tuples
#+BEGIN_SRC elixir
{1, 2}
{status, count, action} = {:ok, 42, "next"}
#+END_SRC

** Lists
#+BEGIN_SRC elixir
[1, 2 ,3] ++ [4, 5 ,6] # concatenation
[1, 2 ,3] -- [1]       # difference
#+END_SRC

** Maps
#+BEGIN_SRC elixir
user = %{"name" => "Tim", "age" => 1}
key = "name"
user[key]
colors = %{red: 0xff000, green: 65280}
colors[:red]
colors.red
#+END_SRC

Raises a ~KeyError~ when using the dot notation on unknown keys

** Scope
~with~ expression allows to define local scope (e.g. when temporary variables needed)
#+BEGIN_SRC elixir
content = "Hello World"
result = with content = "Goodbye",
              name = "Tim",
           IO.puts [content, name]
         do
           "The world is mine"
         end
IO.puts result
IO.puts content
#+END_SRC

* Chapter 5 Functions
** Anonymous
#+BEGIN_SRC elixir
sum = fn (a, b) -> a + b end
sum.(1, 2)
#+END_SRC

When functions take no arguments, parentheses still needed
#+BEGIN_SRC elixir
greet = fn -> IO.puts "Hello" end
greet.()
#+END_SRC

*** Exercise
#+BEGIN_SRC elixir
list_concat = fn (l1, l2) -> l1 ++ l2 end
list_concat.([:a, :b], [:c, :d])

pair_tuple_to_list = fn ({a, b}) -> [a, b] end
pair_tuple_to_list.({1234, 5678})

handle_open = fn
  {:ok, file} -> "Read data: #{IO.read(file, :line)}"
  {_, error}  -> "Error: #{:file.format_error(error)}" # :file is erlang file module
end
handle_open.(File.open("/etc/hosts"))
handle_open.(File.open("/etc/hostx"))

fizzbuzz = fn
  (0, 0, _) -> "FizzBuzz"
  (0, _, _) -> "Fizz"
  (_, 0, _) -> "Buzz"
  (_, _, x) -> x
end

IO.puts fizzbuzz.(0, 0, 1)
IO.puts fizzbuzz.(0, 1, 1)
IO.puts fizzbuzz.(1, 0, 1)
IO.puts fizzbuzz.(1, 1, 1)

conditional_less_fizzbuzz = fn(n) ->
  fizzbuzz.(rem(n, 3), rem(n, 5), n)
end

IO.puts conditional_less_fizzbuzz.(10)
IO.puts conditional_less_fizzbuzz.(11)
IO.puts conditional_less_fizzbuzz.(12)
IO.puts conditional_less_fizzbuzz.(15)
#+END_SRC

** Closure
#+BEGIN_SRC elixir
greeter = fn name ->
  fn ->
    "Hello #{name}!"
  end
end

dave_greeter = greeter.("Dave")
IO.puts dave_greeter.()
#+END_SRC

#+BEGIN_SRC elixir
add_b = fn a ->
  fn b ->
    a + b
  end
end

add_two = add_b.(2)
IO.puts add_two.(8)
#+END_SRC

*** Exercise
#+BEGIN_SRC elixir
prefix = fn x ->
  fn y ->
    "#{x} #{y}"
  end
end
prefix.("Mr").("James")
#+END_SRC

** & Function notation
#+BEGIN_SRC elixir
add_a_b = &(&1 + &2)
add_a_b.(1, 2)
#+END_SRC

*** Exercise
#+BEGIN_SRC elixir
Enum.map [1,2,3,4], fn x -> x + 2 end
Enum.map [1,2,3,4], &(&1 + 2)

Enum.each [1,2,3,4], fn x -> IO.inspect x end
Enum.each [1,2,3,4], &(IO.inspect &1)
#+END_SRC

* Chapter 6 Modules and named functions
*** Exercise
#+BEGIN_SRC elixir
defmodule Times do
  def double(n) do
    n * 2
  end

  def triple(n), do: n * 3

  def quadruple(n), do: double(n) + double(n)
end
Times.double(2)
Times.triple(2)
Times.quadruple(2)
#+END_SRC

#+BEGIN_SRC elixir
defmodule Factorial do
  def of(0), do: 1
  def of(n), do: n * of(n-1)
end
Factorial.of(5)
#+END_SRC

#+BEGIN_SRC elixir
defmodule MySum do
  def sum(0), do: 0
  def sum(n), do: n + sum(n-1)
end
MySum.sum(5)
#+END_SRC

#+BEGIN_SRC elixir
defmodule MyGcd do
  def gcd(x, 0), do: x
  def gcd(x, y), do: gcd(y, rem(x,y))
end
#+END_SRC

** Guard clauses
Predicates attached to function definition

#+BEGIN_SRC elixir
defmodule Factorial do
  def of(0), do: 1
  def of(n) when n > 0, do: n * of(n-1)
end
Factorial.of(-5)
#+END_SRC

*** Exercise
#+BEGIN_SRC elixir
defmodule Chop do
  def guess(n, low..high = range) do
    current = div(high+low, 2)
    _guess(n, range, current)
  end

  def _guess(n, low..high = range , current) when current > n do
    IO.puts "Is it #{current}"
    _guess(n, low..current, div(low + current, 2))
  end

  def _guess(n, low..high = range , current) when current < n do
    IO.puts "Is it #{current}"
    _guess(n, current..high, div(current + high, 2))
  end

  def _guess(n, _, current) when current == n do
    IO.puts "Yes #{n}"
  end
end
#+END_SRC

** The pipe operator
#+BEGIN_SRC elixir
(1..10) |> Enum.map(&(&1*&1)) |> Enum.filter(&(&1 < 50))
#+END_SRC
** Import directive
Brings functions into the current scope
#+BEGIN_SRC elixir
defmodule Example do
  import Enum, only: [uniq: 1]
  def func1, do: [1, 2, 2]

  def func2, do: uniq(func1)
end
#+END_SRC

** Alias directive
#+BEGIN_SRC elixir
defmodule Example do
  alias Enum, as: EN
  def func2, do: EN.uniq([1, 2, 2])
end
#+END_SRC

** Module attributes
Usually used as constants

#+BEGIN_SRC elixir
defmodule Example do
  @version "v1.0.1"
  def version, do: "Running version #{@version}"
end
#+END_SRC

* Chapter 7 Lists and recursion
** Using head and tail
#+BEGIN_SRC elixir
defmodule MyList do
  def len([]), do: 0
  def len([_head|tail]), do: 1 + len(tail)

  def map([], _func), do: []
  def map([head | tail], func), do: [ func.(head) | map(tail, func) ]

  def sum(list), do: sum(list, 0)
  defp sum([], total), do: total
  defp sum([head | tail], total), do: sum(tail, total+head)
end

MyList.len([1, 2, 3, 4])
MyList.map([1, 2, 3], &(&1*&1))
#+END_SRC
*** Exercise
#+BEGIN_SRC elixir
defmodule MyList do
  def sum([]), do: 0
  def sum([head | tail]), do: head + sum(tail)

  def map([], _func), do: []
  def map([head | tail], func), do: [ func.(head) | map(tail, func) ]

  def mapsum(list, func), do: map(list, func) |> sum

  def max([x]), do: x
  def max([head | tail]), do: Kernel.max(head, max(tail))
end

MyList.mapsum([1, 2, 3], &(&1 + 1))
#+END_SRC

** More complex list patterns
#+BEGIN_SRC elixir
defmodule Swapper do
  def swap([]), do: []
  def swap([a, b | tail]), do: [b, a | swap(tail)]
  def swap(_), do: raise "Odd number of elements"
end
Swapper.swap([1, 2, 3, 4])
#+END_SRC

** Lists of lists
#+BEGIN_SRC elixir
defmodule WeatherHistory do
  def for_location_27([]), do: []
  def for_location_27([ [time, 27, temp, rain] | tail]) do
    [ [time, 27, temp, rain] | for_location_27(tail) ]
  end
  def for_location_27([ _ | tail]), do: for_location_27(tail)

  def test_data do
    [
      [1366225622, 26, 15, 0.125],
      [1366225622, 27, 15, 0.45],
      [1366225622, 28, 21, 0.25],
      [1366229222, 26, 19, 0.081],
      [1366229222, 27, 17, 0.468],
      [1366229222, 28, 15, 0.60],
      [1366232822, 26, 22, 0.095],
      [1366232822, 27, 21, 0.05],
      [1366232822, 28, 24, 0.03],
      [1366236422, 26, 17, 0.025]
    ]
  end

  def for_location([], _target_loc), do: []
  def for_location([ head = [_, target_loc, _, _] | tail], target_loc) do
    [ head | for_location(tail, target_loc)]
  end
  def for_location([ _ | tail], target_loc),  do: for_location(tail, target_loc)
end

WeatherHistory.for_location(WeatherHistory.test_data, 27)
#+END_SRC

*** Exercise
#+BEGIN_SRC elixir
defmodule MyList do
  def span(from, to) when from == to, do: to

  def span(from, to) do
    [from | span(from+1, to)]
  end
end

MyList.span(0,5)
#+END_SRC
